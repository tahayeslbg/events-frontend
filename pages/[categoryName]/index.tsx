import { QueryClient, dehydrate, useQuery } from "@tanstack/react-query";

import React, { useState } from "react";
import {
	categoryDateEvents,
	categoryPlaceEvents,
	categorySearchEvents,
	getCategories,
	getCategory,
	getMe,
} from "../../src/utils/fetchData";
import Container from "../../src/containers/Container";
import Head from "next/head";

const Kategori = ({
	categoryId,
	categoryName,
}: {
	categoryId: string;
	categoryName: string;
}) => {
	const [search, setSearch] = useState<string>("");
	const [data, setData] = useState([]);
	const [place, setPlace] = useState<string>("");
	const [date, setDate] = useState<string>("");
	const [myTickets, setMyTickets] = useState([""]);

	const { data: category } = useQuery(["category", categoryId], {
		queryFn: async () => {
			const category = await getCategory(categoryId);
			const categoryEvents = category.events;
			setData(categoryEvents);
			return category;
		},
		staleTime: 60000,
		refetchOnWindowFocus: false,
		cacheTime: 60000,
	});

	useQuery(["category", categoryId, search], {
		queryFn: async search => {
			const newData = await categorySearchEvents(
				search.queryKey[1],
				search.queryKey[2]
			);
			setData(newData.events);
		},
	});

	useQuery(["category", categoryId, place], {
		queryFn: async place => {
			const newData = await categoryPlaceEvents(
				place.queryKey[1],
				place.queryKey[2]
			);
			setData(newData.events);
		},
	});

	useQuery(["category", categoryId, date], {
		queryFn: async date => {
			const newData = await categoryDateEvents(
				date.queryKey[1],
				date.queryKey[2]
			);
			setData(newData.events);
		},
	});

	useQuery(["me"], {
		queryFn: async () => {
			const meData = await getMe();
			setMyTickets(meData.tickets);
		},
		staleTime: 60000,
		refetchOnWindowFocus: false,
		cacheTime: 60000,
	});

	return (
		<>
			<Head>
				<title>
					Challenge | {category ? category.name : "Böyle Bir Sayfa Bulunamadı"}{" "}
				</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<Container
				data={data}
				date={date}
				place={place}
				search={search}
				setDate={setDate}
				setPlace={setPlace}
				setSearch={setSearch}
				categoryId={categoryId}
				categoryName={categoryName}
				myTickets={myTickets}
				setMyTickets={setMyTickets}
			/>
		</>
	);
};

export const getServerSideProps = async (ctx: any) => {
	const { categoryName } = ctx.params;

	const queryClient = new QueryClient();

	const categories = await getCategories();
	const categoryId = categories.find(
		(category: any) => category.slug === categoryName
	);

	await queryClient.prefetchQuery(["category", categoryId._id], () =>
		getCategory(categoryId._id)
	);

	await queryClient.prefetchQuery(["categories"], getCategories, {
		staleTime: 60000,
	});
	await queryClient.prefetchQuery(["me"], getMe, );
	return {
		props: {
			dehydratedState: dehydrate(queryClient),
			categoryId: categoryId._id,
			categoryName: categoryName,
		},
	};
};

export default Kategori;
